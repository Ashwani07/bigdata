# Get the ip of host / bridge
docker network ls
docker network inspect bridge
docker network inspect host

# start the docker containers
docker-compose up

# Check the containers
docker-compose ps

#check the ZooKeeper/kafka logs to verify that it is healthy.
docker-compose logs zookeeper | grep -i binding
docker-compose logs kafka | grep -i started

# Get inside the running container - kafka
docker exec -ti kafka_kafka_1 bash

# Exit from the running container terminal
exit

# Find the path of kafka-topics.sh
find -name kafka-topics.sh

# Get the list of topics
./opt/kafka_2.12-2.2.1/bin/kafka-topics.sh --list --zookeeper 172.17.0.1:2181
OR
docker run --rm wurstmeister/kafka kafka-topics.sh --list --zookeeper 172.17.0.1:2181

# Create topic
./opt/kafka_2.12-2.2.1/bin/kafka-topics.sh --create --topic INDvsPAK --replication-factor 1 --partitions 1 --zookeeper 172.17.0.1:2181
OR
docker run --rm wurstmeister/kafka kafka-topics.sh --create --topic INDvsPAK --replication-factor 1 --partitions 1 --zookeeper 172.17.0.1:2181

# Create publisher
docker run --rm --interactive wurstmeister/kafka kafka-console-producer.sh --topic INDvsPAK --broker-list 172.17.0.1:9092

# Create consumer
docker run --rm wurstmeister/kafka kafka-console-consumer.sh --topic INDvsPAK --from-beginning --bootstrap-server 172.17.0.1:9092

# Go inside Zookeeper container
docker exec -it kafka_zookeeper_1 bash

# Connect to Zookeeper server
bin/zkCli.sh -server 172.17.0.1:2181

    # List root
    ls /

    # List broker
    ls /brokers
    ./zookeeper-shell.sh localhost:2181

    # List topic
    ls /brokers/topics

    # List consumers
    ls /consumers

    # List consumer owner
    ls /consumers/console-consumer-XXXX/owners

    # Exit the zookeeper server
    quit

